// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;

namespace BookNest_Service.Models;

public partial class BookTracker7Context : DbContext
{
    public BookTracker7Context()
    {
    }

    public BookTracker7Context(DbContextOptions<BookTracker7Context> options)
        : base(options)
    {
    }

    public virtual DbSet<Author> Authors { get; set; }

    public virtual DbSet<Book> Books { get; set; }

    public virtual DbSet<BookShelf> BookShelves { get; set; }

    public virtual DbSet<Comment> Comments { get; set; }

    public virtual DbSet<ExternalLogin> ExternalLogins { get; set; }

    public virtual DbSet<Genre> Genres { get; set; }

    public virtual DbSet<ReadingStatus> ReadingStatuses { get; set; }

    public virtual DbSet<Review> Reviews { get; set; }

    public virtual DbSet<Role> Roles { get; set; }

    public virtual DbSet<User> Users { get; set; }

    public virtual DbSet<UserBook> UserBooks { get; set; }

    public static string GetConnectionString(string connectionStringName)
    {
        var config = new ConfigurationBuilder()
            .SetBasePath(AppDomain.CurrentDomain.BaseDirectory)
            .AddJsonFile("appsettings.json")
            .Build();

        string connectionString = config.GetConnectionString(connectionStringName);
        return connectionString;
    }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        => optionsBuilder.UseSqlServer(GetConnectionString("DefaultConnection")).UseQueryTrackingBehavior(QueryTrackingBehavior.NoTracking);



    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Author>(entity =>
        {
            entity.HasKey(e => e.AuthorId).HasName("PK__Authors__70DAFC341DE2AB18");

            entity.HasIndex(e => e.Name, "UQ__Authors__737584F63F9BD3F9").IsUnique();

            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(150);
        });

        modelBuilder.Entity<Book>(entity =>
        {
            entity.HasKey(e => e.BookId).HasName("PK__Books__3DE0C207E6E11F3D");

            entity.HasIndex(e => e.Isbn13, "UQ__Books__3BF79E020BAEE370").IsUnique();

            entity.Property(e => e.CoverImageUrl).HasColumnName("CoverImageURL");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Isbn13)
                .HasMaxLength(13)
                .HasColumnName("ISBN13");
            entity.Property(e => e.Title)
                .IsRequired()
                .HasMaxLength(255);

            entity.HasOne(d => d.Author).WithMany(p => p.Books)
                .HasForeignKey(d => d.AuthorId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Books_Authors");

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.Books)
                .HasForeignKey(d => d.CreatedBy)
                .HasConstraintName("FK_Books_CreatedBy");

            entity.HasOne(d => d.Genre).WithMany(p => p.Books)
                .HasForeignKey(d => d.GenreId)
                .HasConstraintName("FK_Books_Genres");
        });

        modelBuilder.Entity<BookShelf>(entity =>
        {
            entity.HasKey(e => e.ShelfId).HasName("PK__BookShel__DBD04F07ED9C94BC");

            entity.HasIndex(e => new { e.UserId, e.ShelfName }, "UQ_BookShelves_UserId_ShelfName").IsUnique();

            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Description).HasMaxLength(255);
            entity.Property(e => e.ShelfName)
                .IsRequired()
                .HasMaxLength(100);

            entity.HasOne(d => d.User).WithMany(p => p.BookShelves)
                .HasForeignKey(d => d.UserId)
                .HasConstraintName("FK_BookShelves_Users");
        });

        modelBuilder.Entity<Comment>(entity =>
        {
            entity.HasKey(e => e.CommentId).HasName("PK__Comments__C3B4DFCAB839F503");

            entity.Property(e => e.CommentText)
                .IsRequired()
                .HasMaxLength(1000);
            entity.Property(e => e.DateCommented)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.EditedAt).HasColumnType("datetime");

            entity.HasOne(d => d.Review).WithMany(p => p.Comments)
                .HasForeignKey(d => d.ReviewId)
                .HasConstraintName("FK_Comments_Reviews");

            entity.HasOne(d => d.User).WithMany(p => p.Comments)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Comments_Users");
        });

        modelBuilder.Entity<ExternalLogin>(entity =>
        {
            entity.HasKey(e => e.ExternalLoginId).HasName("PK__External__A8FDB3AE04956A5D");

            entity.HasIndex(e => new { e.Provider, e.ProviderKey }, "UQ_ExternalLogins_Provider_ProviderKey").IsUnique();

            entity.Property(e => e.Provider)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.ProviderKey)
                .IsRequired()
                .HasMaxLength(255);

            entity.HasOne(d => d.User).WithMany(p => p.ExternalLogins)
                .HasForeignKey(d => d.UserId)
                .HasConstraintName("FK_ExternalLogins_Users");
        });

        modelBuilder.Entity<Genre>(entity =>
        {
            entity.HasKey(e => e.GenreId).HasName("PK__Genres__0385057E5D9D7956");

            entity.HasIndex(e => e.GenreName, "UQ__Genres__BBE1C33920C34ABF").IsUnique();

            entity.Property(e => e.Description).HasMaxLength(255);
            entity.Property(e => e.GenreName)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<ReadingStatus>(entity =>
        {
            entity.HasKey(e => e.StatusId).HasName("PK__ReadingS__C8EE2063D744449E");

            entity.ToTable("ReadingStatus");

            entity.HasIndex(e => e.StatusName, "UQ__ReadingS__05E7698AE12500DA").IsUnique();

            entity.Property(e => e.Description).HasMaxLength(255);
            entity.Property(e => e.StatusName)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<Review>(entity =>
        {
            entity.HasKey(e => e.ReviewId).HasName("PK__Reviews__74BC79CE1595C645");

            entity.HasIndex(e => new { e.UserId, e.BookId }, "UQ_Reviews_UserId_BookId").IsUnique();

            entity.Property(e => e.DateReviewed)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.IsPublic).HasDefaultValue(true);
            entity.Property(e => e.ReviewText).IsRequired();

            entity.HasOne(d => d.Book).WithMany(p => p.Reviews)
                .HasForeignKey(d => d.BookId)
                .HasConstraintName("FK_Reviews_Books");

            entity.HasOne(d => d.User).WithMany(p => p.Reviews)
                .HasForeignKey(d => d.UserId)
                .HasConstraintName("FK_Reviews_Users");
        });

        modelBuilder.Entity<Role>(entity =>
        {
            entity.HasKey(e => e.RoleId).HasName("PK__Roles__8AFACE1AF788C7FA");

            entity.HasIndex(e => e.RoleName, "UQ__Roles__8A2B6160A676AE20").IsUnique();

            entity.Property(e => e.Description).HasMaxLength(255);
            entity.Property(e => e.RoleName)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<User>(entity =>
        {
            entity.HasKey(e => e.UserId).HasName("PK__Users__1788CC4C2159EA57");

            entity.HasIndex(e => e.Username, "UQ__Users__536C85E4F93131F8").IsUnique();

            entity.HasIndex(e => e.Email, "UQ__Users__A9D105340FC6D661").IsUnique();

            entity.Property(e => e.Email)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.FirstName).HasMaxLength(50);
            entity.Property(e => e.IsActive).HasDefaultValue(true);
            entity.Property(e => e.LastLoginDate).HasColumnType("datetime");
            entity.Property(e => e.LastName).HasMaxLength(50);
            entity.Property(e => e.Password)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.ProfilePictureUrl).HasColumnName("ProfilePictureURL");
            entity.Property(e => e.RegistrationDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.RoleId).HasDefaultValue(2);
            entity.Property(e => e.Username)
                .IsRequired()
                .HasMaxLength(50);

            entity.HasOne(d => d.Role).WithMany(p => p.Users)
                .HasForeignKey(d => d.RoleId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Users_Roles");
        });

        modelBuilder.Entity<UserBook>(entity =>
        {
            entity.HasKey(e => e.UserBookId).HasName("PK__UserBook__82C7393071E95F01");

            entity.HasIndex(e => new { e.UserId, e.BookId }, "UQ_UserBooks_UserId_BookId").IsUnique();

            entity.Property(e => e.DateAdded)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.FinishDate).HasColumnType("datetime");
            entity.Property(e => e.ReadingProgress).HasColumnType("decimal(5, 2)");
            entity.Property(e => e.StartDate).HasColumnType("datetime");

            entity.HasOne(d => d.Book).WithMany(p => p.UserBooks)
                .HasForeignKey(d => d.BookId)
                .HasConstraintName("FK_UserBooks_Books");

            entity.HasOne(d => d.Shelf).WithMany(p => p.UserBooks)
                .HasForeignKey(d => d.ShelfId)
                .HasConstraintName("FK_UserBooks_BookShelves");

            entity.HasOne(d => d.Status).WithMany(p => p.UserBooks)
                .HasForeignKey(d => d.StatusId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_UserBooks_ReadingStatus");

            entity.HasOne(d => d.User).WithMany(p => p.UserBooks)
                .HasForeignKey(d => d.UserId)
                .HasConstraintName("FK_UserBooks_Users");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}